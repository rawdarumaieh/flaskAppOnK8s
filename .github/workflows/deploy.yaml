name: CI/CD to AWS EKS (Build, Push, Deploy)

#triggering event
on:
  push:
    branches:
      - main # Trigger on push to the main branch
  workflow_dispatch: # Allows manual trigger from the GitHub UI

env:
  # The path where your app lives in Docker Hub
  DOCKER_IMAGE_PATH: rawdarumaieh/flask-app-demo 
  # Path to your Kubernetes manifests folder
  K8S_MANIFESTS_PATH: kubernetes 
  # The specific name of your Deployment object to be patched
  K8S_DEPLOYMENT_NAME: flask-app-deployment

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} # This should be a Docker PAT

    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        # Tag with both the unique SHA and 'latest'
        tags: ${{ env.DOCKER_IMAGE_PATH }}:${{ github.sha }}, ${{ env.DOCKER_IMAGE_PATH }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build_and_push # Only run after successful build and push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 1. AWS Authentication
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 2. Get Kubeconfig for EKS
    - name: Update Kubeconfig
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    # 3. Patch Deployment with new Image Tag (Imperative Update)
    - name: Update Deployment Image
      # The kubectl set image command is the simplest way to update the running image without sed/patching files
      run: |
        NEW_IMAGE_TAG="${{ env.DOCKER_IMAGE_PATH }}:${{ github.sha }}"
        
        # This updates the image on the running deployment
        kubectl set image deployment/${{ env.K8S_DEPLOYMENT_NAME }} flask-app-container=${NEW_IMAGE_TAG} --record
        
    # 4. Apply all other Kubernetes Configuration (Monitoring, Services, etc.)
    - name: Apply/Ensure Monitoring and Service Definitions
      # Apply the entire kubernetes directory. This handles the Prometheus stack and Service.
      run: kubectl apply -f ${{ env.K8S_MANIFESTS_PATH }}/
      
    # 5. Wait for the Deployment to finish rolling out
    - name: Rollout Status Check
      run: kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT_NAME }} --timeout=5m
