# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
# ClusterRole for discovery
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-discovery
rules:
  - apiGroups: [""]
    resources: ["nodes","nodes/proxy","services","endpoints","pods"]
    verbs: ["get","list","watch"]
  - apiGroups: ["apps","extensions"]
    resources: ["replicasets"]
    verbs: ["get","list","watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get","list","watch"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-discovery-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-discovery
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring
---
# ConfigMap (prometheus.yml)
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 60s
      evaluation_interval: 60s
    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: kube-system
            action: keep
      - job_name: 'kubelets'
        kubernetes_sd_configs:
          - role: node
        metrics_path: /metrics/cadvisor
        scheme: http
      - job_name: 'kubelet-summary'
        kubernetes_sd_configs:
          - role: node
        metrics_path: /metrics
        scheme: http
      - job_name: 'kube-state-metrics'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            regex: kube-state-metrics
            action: keep
---
# Deployment (uses the prometheus ServiceAccount)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=6h
            - --storage.tsdb.min-block-duration=2h
            - --web.enable-lifecycle
            - --log.level=info
          ports:
            - containerPort: 9090
          resources:
            requests:
              cpu: "100m"
              memory: "200Mi"
            limits:
              cpu: "300m"
              memory: "512Mi"
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: data
              mountPath: /prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: data
          emptyDir: {}
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus